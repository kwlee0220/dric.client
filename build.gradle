apply plugin: 'java-library'
apply plugin: 'maven-publish'
apply plugin: 'com.github.johnrengelman.shadow'

buildscript {
	repositories {
		mavenLocal()
		jcenter()
	}
	dependencies {
		classpath 'com.github.jengelman.gradle.plugins:shadow:4.0.4'
	}
}

group = 'etri'
version = '20.05.15'

sourceCompatibility = JavaVersion.VERSION_1_8
[compileJava,compileTestJava]*.options*.encoding = 'UTF-8'

sourceSets {
	main {
		java {
			srcDirs 'src/main/proto/java'
			srcDirs 'src/main/proto/grpc'
		}
	}
}

repositories {
    mavenLocal()
	maven {
		url "http://repo.osgeo.org/repository/release/"
	}
    mavenCentral()
}

ext.opencv_version = '430'
ext.snakeyaml_version = '1.26'
ext.grpc_version = '1.16.1'
ext.protobuf_version = '3.5.1'
ext.avro_version = '1.9.2'
ext.paho_version = '1.2.4'

dependencies {
	compile project(":utils")
	compile project(":marmot.data")
	
	// OpenCV
	compile fileTree(dir: 'lib', include: "opencv-${opencv_version}.jar")
	
	// Avro
	api "org.apache.avro:avro:${avro_version}"
	implementation "org.apache.avro:avro-compiler:${avro_version}"
	
	// Paho MQTT
	implementation "org.eclipse.paho:org.eclipse.paho.client.mqttv3:${paho_version}"
	
	// grpc
	api "com.google.protobuf:protobuf-java:${protobuf_version}"
	implementation "com.google.protobuf:protobuf-java-util:${protobuf_version}"
	implementation "io.grpc:grpc-stub:${grpc_version}"
	implementation "io.grpc:grpc-netty-shaded:${grpc_version}"
	implementation "io.grpc:grpc-protobuf:${grpc_version}"
	
	// yaml
	implementation group: 'org.yaml', name: 'snakeyaml', version: "${snakeyaml_version}"
}

task sourceJar(type: Jar) {
	classifier 'sources'
	from sourceSets.main.allSource
}

task javadocJar(type: Jar) {
	classifier 'javadoc'
	from javadoc.destinationDir
}

shadowJar {
	classifier 'all'
	
	mergeServiceFiles()
	
	exclude 'META-INF/*.SF'
	exclude 'META-INF/*.DSA'
	exclude 'META-INF/*.RSA'
}

artifacts {
	archives sourceJar
	archives javadocJar
	archives shadowJar
}

publishing {
	publications {
		commonGrpc(MavenPublication) {
			from components.java
			
			artifact sourceJar
			artifact javadocJar
			artifact shadowJar
		}
	}
}

ext.distDir = "${System.properties['user.home']}/Temp/dric/${archivesBaseName}.dist"
task distributeBinary(type:Copy) {
	println("${distDir}")
	dependsOn assemble
	into "${distDir}"
	from ("${projectDir}") {
		include 'bin/**'
		include '*.properties'
		include '*.yaml'
		include '.gitignore'
	}
}

apply plugin: 'eclipse'
eclipse {
	classpath {
		file {
			withXml {
				def node = it.asNode()
				node.appendNode('classpathentry', [kind: 'output', path: 'classes'])
			}
			
			whenMerged { cp ->
				Map entryByPath = cp.entries.groupBy { entry -> entry.path }
				entryByPath.each { key, values ->
					if ( values.size() > 1 ) {
            			def entry = values.first()
            			if ( entry.kind == 'src' ) {
            				entry.includes = []
            				entry.excludes = []
            			}
            			int index = cp.entries.indexOf entry
            			cp.entries.removeAll values
            			cp.entries.add index, entry
					}
				}
				cp.entries.each { entry ->
					if ( entry.kind == 'src' && entry.hasProperty('output') ) {
						entry.output = 'classes'
					}
				}
			}
		}
	}
}
